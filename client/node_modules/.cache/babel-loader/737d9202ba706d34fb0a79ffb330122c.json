{"ast":null,"code":"var _jsxFileName = \"/Users/vmeset/React/vmeset/project01/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport AppRouter from \"./components/AppRouter\";\nimport NavBar from \"./components/NavBar\";\nimport AlertBlock from \"./components/AlertBlock\";\nimport { observer } from \"mobx-react-lite\";\nimport { Context } from \".\";\nimport { check } from \"./http/userAPI\";\nimport { Spinner } from \"react-bootstrap\";\nimport ModalBlock from \"./components/ModalBlock\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = observer(_c = _s(() => {\n  _s();\n\n  const {\n    user\n  } = useContext(Context);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    check().then(data => {\n      if (data) {\n        user.setIsAuth(true);\n        user.setUser(data);\n      }\n    }).finally(() => setIsLoading(false));\n  });\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"grow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlertBlock, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalBlock, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppRouter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}, \"w5sSHBprJenFDD9FAXMmH2LFVfg=\"));\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App$observer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/vmeset/React/vmeset/project01/client/src/App.js"],"names":["React","useContext","useEffect","useState","BrowserRouter","AppRouter","NavBar","AlertBlock","observer","Context","check","Spinner","ModalBlock","App","user","isLoading","setIsLoading","then","data","setIsAuth","setUser","finally"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAAQC,QAAR,QAAuB,iBAAvB;AACA,SAASC,OAAT,QAAwB,GAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAEA,MAAMC,GAAG,GAAGL,QAAQ,SAAE,MAAM;AAAA;;AAE1B,QAAM;AAACM,IAAAA;AAAD,MAASb,UAAU,CAACQ,OAAD,CAAzB;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,IAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,KAAK,GAAGO,IAAR,CAAaC,IAAI,IAAI;AACnB,UAAGA,IAAH,EAAS;AACPJ,QAAAA,IAAI,CAACK,SAAL,CAAe,IAAf;AACAL,QAAAA,IAAI,CAACM,OAAL,CAAaF,IAAb;AACD;AACF,KALD,EAKGG,OALH,CAKW,MAAML,YAAY,CAAC,KAAD,CAL7B;AAMD,GAPQ,CAAT;;AASA,MAAGD,SAAH,EAAc;AACZ,wBAAO,QAAC,OAAD;AAAS,MAAA,SAAS,EAAE;AAApB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE,QAAC,aAAD;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA1BmB,kCAApB;MAAMF,G;AA4BN,eAAeA,GAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport AppRouter from \"./components/AppRouter\";\nimport NavBar from \"./components/NavBar\";\nimport AlertBlock from \"./components/AlertBlock\";\nimport {observer} from \"mobx-react-lite\"\nimport { Context } from \".\";\nimport { check } from \"./http/userAPI\";\nimport { Spinner } from \"react-bootstrap\";\nimport ModalBlock from \"./components/ModalBlock\";\n\nconst App = observer( () => {\n\n  const {user} = useContext(Context)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    check().then(data => {\n      if(data) {\n        user.setIsAuth(true)\n        user.setUser(data)\n      }\n    }).finally(() => setIsLoading(false))\n  })\n\n  if(isLoading) {\n    return <Spinner animation={\"grow\"} />\n  }\n\n  return (\n    <BrowserRouter>\n      <NavBar />\n      <AlertBlock />\n      <ModalBlock />\n      <AppRouter />\n    </BrowserRouter>\n  );\n})\n\nexport default App;"]},"metadata":{},"sourceType":"module"}